/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PbcReleaseUpdateDialog.java
 *
 * Created on Mar 20, 2011, 12:15:12 PM
 */

package com.eclipsemarkets.pbc.face;

import com.eclipsemarkets.global.DataGlobal;
import com.eclipsemarkets.global.NIOGlobal;
import com.eclipsemarkets.global.SwingGlobal;
import com.eclipsemarkets.pbc.PbcProperties;
import com.eclipsemarkets.pbc.web.PackageUpdateInfo;
import com.eclipsemarkets.pbc.web.PbcReleaseInformation;
import com.eclipsemarkets.pbc.web.PbcReleaseStatus;
import com.eclipsemarkets.release.PointBoxServerIPs;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Zhijun Zhang
 */
public class PbcReleaseUpdateDialog extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;
    private static final Logger logger;
    static{
        logger = Logger.getLogger(PbcReleaseUpdateDialog.class.getName());
    }

    private final IPbcFace face;
    private PbcReleaseInformation releaseInfo;
    private Purpose purpose;
    private final ArrayList<String> downloadURLs;
    
    private final String rollbackFolderPath = "rollback";
    private final HashMap<String, String> origPackagePaths;
    private final HashMap<String, String> backupPackagePaths;
    
    private static PbcReleaseUpdateDialog self;
    static{
        self = null;
    }
    
    private PbcReleaseUpdateDialog(IPbcFace face) {
        super(face.getPointBoxMainFrame(), true);
        initComponents();
        downloadURLs = new ArrayList<String>();
        this.face = face;
        releaseInfo = null;
        
        jBackgroundRunning.setVisible(false);
        
        origPackagePaths = new HashMap<String, String>();
        backupPackagePaths = new HashMap<String, String>();
    }
    
    public static PbcReleaseUpdateDialog getSingelton(IPbcFace face){
        if (self == null){
            self = new PbcReleaseUpdateDialog(face);
        }
        return self;
    }
    
    boolean isRollbackValid() {
        if (NIOGlobal.isValidFolder(rollbackFolderPath)){
            File rollbackFolder = new File(rollbackFolderPath);
            File[] backupJarFiles = rollbackFolder.listFiles();
            if ((backupJarFiles == null)||(backupJarFiles.length == 0)){
                return false;
            }else{
                return true;
            }
        }else{
            return false;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLocalReleasePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLocalVersion = new javax.swing.JLabel();
        jLocalReleaseCode = new javax.swing.JLabel();
        jLatestReleasePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTargetVersion = new javax.swing.JLabel();
        jTargetReleaseCode = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jAgreement = new javax.swing.JTextArea();
        jMessageSubject = new javax.swing.JLabel();
        jUpdateProgress = new javax.swing.JProgressBar();
        jBackgroundRunning = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jUpdate = new javax.swing.JButton();
        jDelay = new javax.swing.JButton();
        jAcceptAgreement = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PointBox Release Manager:");

        jLocalReleasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Your PointBox Console: "));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Version: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Release Code:");

        jLocalVersion.setText("2.1.1");

        jLocalReleaseCode.setText("jLabel4");

        javax.swing.GroupLayout jLocalReleasePanelLayout = new javax.swing.GroupLayout(jLocalReleasePanel);
        jLocalReleasePanel.setLayout(jLocalReleasePanelLayout);
        jLocalReleasePanelLayout.setHorizontalGroup(
            jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLocalReleasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLocalReleaseCode)
                    .addComponent(jLocalVersion))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jLocalReleasePanelLayout.setVerticalGroup(
            jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLocalReleasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLocalVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLocalReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLocalReleaseCode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLatestReleasePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New PointBox Console: "));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Version: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Release Code:");

        jTargetVersion.setText("2.1.1");

        jTargetReleaseCode.setText("jLabel4");

        javax.swing.GroupLayout jLatestReleasePanelLayout = new javax.swing.GroupLayout(jLatestReleasePanel);
        jLatestReleasePanel.setLayout(jLatestReleasePanelLayout);
        jLatestReleasePanelLayout.setHorizontalGroup(
            jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLatestReleasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(30, 30, 30)
                .addGroup(jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTargetReleaseCode)
                    .addComponent(jTargetVersion))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jLatestReleasePanelLayout.setVerticalGroup(
            jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLatestReleasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTargetVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jLatestReleasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTargetReleaseCode)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jAgreement.setEditable(false);
        jAgreement.setColumns(20);
        jAgreement.setLineWrap(true);
        jAgreement.setRows(5);
        jAgreement.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jAgreement);

        jMessageSubject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jMessageSubject.setText("Freeware Agreement:");

        jBackgroundRunning.setText("Background update");
        jBackgroundRunning.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jBackgroundRunningItemStateChanged(evt);
            }
        });

        jPanel3.setLayout(new java.awt.GridLayout(1, 2, 2, 0));

        jUpdate.setText("Update it now");
        jUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateActionPerformed(evt);
            }
        });
        jPanel3.add(jUpdate);

        jDelay.setText("Do it later");
        jDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelayActionPerformed(evt);
            }
        });
        jPanel3.add(jDelay);

        jAcceptAgreement.setText("I accept the following agreement");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addComponent(jLatestReleasePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLocalReleasePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jUpdateProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBackgroundRunning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jMessageSubject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(jAcceptAgreement)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLocalReleasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLatestReleasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMessageSubject)
                    .addComponent(jAcceptAgreement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jUpdateProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBackgroundRunning)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateActionPerformed
        if (jUpdate.getText().equalsIgnoreCase(Purpose.Update.toString())){
            updateRelease();
        }else if (jUpdate.getText().equalsIgnoreCase(Purpose.Rollback.toString())){
            rollbackRelease();
        }
    }//GEN-LAST:event_jUpdateActionPerformed

    private void updateRelease() {
        if (!jAcceptAgreement.isSelected()){
            if (JOptionPane.showConfirmDialog(this, 
                                              "Do you accept \"Point Box Software End User License Agreement\" before you execute online update?",
                                              "Accept Agreement:",
                                              JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
            {
                jAcceptAgreement.setForeground(Color.red);
                return;
            }else{
                jAcceptAgreement.setSelected(true);
            }
        }
        if (JOptionPane.showConfirmDialog(this, 
                                          "Start to update your local version right now? "
                                            + "After complete it, you are required to restart the application.",
                                          "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            face.getKernel().shutdown(face.getPointBoxLoginUser(), false, false);
            jUpdate.setEnabled(false);
            jUpdateProgress.setIndeterminate(true);
            (new PbcUpdater()).execute();
        }else{
            jUpdate.setEnabled(true);
        }
    }

    private void rollbackRelease() {
        if (!jAcceptAgreement.isSelected()){
            if (JOptionPane.showConfirmDialog(this, 
                                              "Do you accept \"Point Box Software End User License Agreement\" before you rollback to the previous release?",
                                              "Accept Agreement:",
                                              JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
            {
                jAcceptAgreement.setForeground(Color.red);
                return;
            }else{
                jAcceptAgreement.setSelected(true);
            }
        }
        if (JOptionPane.showConfirmDialog(this, 
                                          "Start to rollback now?"
                                          + NIOGlobal.lineSeparator() + "After complete it, you are required to restart the application.",
                                          "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            jUpdate.setEnabled(false);
            jUpdateProgress.setIndeterminate(true);
            (new PbcRollbacker()).execute();
        }else{
            jUpdate.setEnabled(true);
        }
    }

    private void jDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelayActionPerformed
        if ((releaseInfo.getPbcReleaseStatus().equals(PbcReleaseStatus.Latest_Release)) 
                || (releaseInfo.getPbcReleaseStatus().equals(PbcReleaseStatus.Supported_Previous_Release)))
        {
            setVisible(false);
        }else{
            JOptionPane.showMessageDialog(this, "You have to upgrade your release which was not supported by current PointBox server.");
        }
    }//GEN-LAST:event_jDelayActionPerformed

    private void jBackgroundRunningItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jBackgroundRunningItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED){
            setVisible(false);
        }
    }//GEN-LAST:event_jBackgroundRunningItemStateChanged

    /**
     * 
     * @param releaseInfo
     * @return - successfully get release information or not
     */
    private boolean resetReleaseInfo(PbcReleaseInformation releaseInfo) {
        origPackagePaths.clear();
        backupPackagePaths.clear();
        PackageUpdateInfo[] latestNewPackages = releaseInfo.getLatestPackageUpdateDetails();
        if ((latestNewPackages == null) || (latestNewPackages.length <= 0)){
            return false;
        }
        
        //prepare for updating latest packages
        for (int i = 0; i < latestNewPackages.length; i++){
            if (DataGlobal.isEmptyNullString(latestNewPackages[i].getLocationInProject())){
                origPackagePaths.put(latestNewPackages[i].getPointBoxPackage(), setJarExtension(latestNewPackages[i].getPointBoxPackage()));
            }else{
                origPackagePaths.put(latestNewPackages[i].getPointBoxPackage(), 
                                     DataGlobal.denullize(latestNewPackages[i].getLocationInProject()) + NIOGlobal.fileSeparator() + setJarExtension(latestNewPackages[i].getPointBoxPackage()));
            }
            backupPackagePaths.put(latestNewPackages[i].getPointBoxPackage(), 
                                     rollbackFolderPath + NIOGlobal.fileSeparator() + setJarExtension(latestNewPackages[i].getPointBoxPackage()));
        }
        return true;
    }
    
    private String setJarExtension(String pointBoxPackageName) {
        if (pointBoxPackageName.endsWith(".jar")){
            return pointBoxPackageName;
        }else{
            return pointBoxPackageName + ".jar";
        }
    }
    
    void display(PbcReleaseInformation releaseInfo, Purpose purpose) {
        if (isVisible()){
            return;
        }
        if ((purpose == null)||(releaseInfo == null)){
            logger.log(Level.SEVERE, "Parameters: releaseInfo and/or purpose are/is NULL");
            return;
        }
        this.releaseInfo = releaseInfo;
        this.purpose = purpose;
        resetReleaseInfo(releaseInfo);
        
        if (SwingUtilities.isEventDispatchThread()){
            setVisible(true);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    setVisible(true);
                }
            });
        }//if
    }

    @Override
    public void setVisible(boolean value) {
        if (value){
            jBackgroundRunning.setSelected(false);
            if (releaseInfo == null){
                JOptionPane.showMessageDialog(this, 
                        "Error: cannot display PointBox console upadte dialog because release information is not available.");
            }else{
                populateReleaseInfo();
                jUpdateProgress.setIndeterminate(false);
            }
        }
        setLocation(SwingGlobal.getScreenCenterPoint(this));
        super.setVisible(value);
    }

    private void populateReleaseInfo() {
        switch(purpose){
            case Update:
                populateReleaseInfoForUpdate();
                break;
            case Rollback:
                populateReleaseInfoForRollback();
                break;
        }
    }

    private void populateReleaseInfoForRollback() {
        
        //jLocalVersion.setText(releaseInfo.getLocalVersion() + " (" + PbcProperties.getSingleton().getBuildVersion() + ")");
        jLocalReleaseCode.setText(releaseInfo.getLocalReleaseCode());

        ((TitledBorder)jLatestReleasePanel.getBorder()).setTitle("Previous PointBox Console: ");

        //jTargetVersion.setText(PbcProperties.getSingleton().getRollbackVersion());
        jTargetReleaseCode.setText(PbcProperties.getSingleton().getRollbackCode());

        jUpdate.setText(Purpose.Rollback.toString());
        if ((releaseInfo.getLocalReleaseCode() == null) || (PbcProperties.getSingleton().getRollbackCode() == null)
                || (releaseInfo.getLocalReleaseCode().equalsIgnoreCase(PbcProperties.getSingleton().getRollbackCode())))
        {
            jMessageSubject.setText("Message: ");
            jAcceptAgreement.setVisible(false);
            jAcceptAgreement.setSelected(false);
            jUpdate.setEnabled(false);
            jAgreement.setText("Current release has no rollback offered.");
        }else{
            jMessageSubject.setText("End User Agreement: ");
            jAcceptAgreement.setVisible(true);
            jAcceptAgreement.setSelected(false);
            jUpdate.setEnabled(true);
            loadAgreement();
        }
    }

    private void populateReleaseInfoForUpdate() {
        ((TitledBorder)jLatestReleasePanel.getBorder()).setTitle("New PointBox Console: ");
        //jLocalVersion.setText(releaseInfo.getLocalVersion() + " (" + PbcProperties.getSingleton().getBuildVersion() + ")");
        jLocalReleaseCode.setText(releaseInfo.getLocalReleaseCode());
        if (releaseInfo.getPbcReleaseStatus().equals(PbcReleaseStatus.Latest_Release)){
            //jTargetVersion.setText(releaseInfo.getLocalVersion());
            jTargetReleaseCode.setText(releaseInfo.getLocalReleaseCode());
            jMessageSubject.setText("Message:");
            jAcceptAgreement.setVisible(false);
            jUpdate.setEnabled(false);
            jAgreement.setText("Your " + PbcProperties.getSingleton().getSoftwareName() + " is the latest release.");
        }else{
            PackageUpdateInfo[] updateInfoList = releaseInfo.getLatestPackageUpdateDetails();
            if (updateInfoList == null){
                logger.log(Level.SEVERE, "updateInfoList should not be NULL.");
                //jTargetVersion.setText(releaseInfo.getLatestVersion());
                jTargetReleaseCode.setText(releaseInfo.getLatestReleaseCode());
                jMessageSubject.setText("Message:");
                jAcceptAgreement.setVisible(false);
                jUpdate.setEnabled(false);
                jAgreement.setText("Your " + PbcProperties.getSingleton().getSoftwareName() + " release is too old to be updated. Please contact PointBox administrator for updgrade.");
            }else{
                //jTargetVersion.setText(releaseInfo.getLatestVersion());
                jTargetReleaseCode.setText(releaseInfo.getLatestReleaseCode());
                jUpdate.setText(Purpose.Update.toString());
                jMessageSubject.setText("End User Agreement: ");
                jAcceptAgreement.setVisible(true);
                jAcceptAgreement.setSelected(false);
                jUpdate.setEnabled(true);

                downloadURLs.clear();
                PackageUpdateInfo updateInfo;
                for (int i = 0; i < updateInfoList.length; i++){
                    updateInfo = updateInfoList[i];
                    //details += updateInfo.getPointBoxPackage() + ":" + NIOGlobal.lineSeparator();
                    //if (DataGlobal.isNonEmptyNullString(updateInfo.getComment())){
                    //    details += "[" + (i+1) + "] " + updateInfo.getComment() + NIOGlobal.lineSeparator() + NIOGlobal.lineSeparator();
                    //}
                    downloadURLs.add(updateInfo.getUrl());
                }
                loadAgreement();
            }
        }
        
    }
    
    private void loadAgreement(){
        new SwingWorker<Void,Void>(){
            @Override
            protected Void doInBackground() throws Exception {
                loadAgreementHelper();
                return null;
            }
            
        }.execute();
    }
    
    
    private void loadAgreementHelper() {
//        StringBuilder sb = new StringBuilder();
//        sb.append("Point Box Software End User License Agreement");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("IMPORTANT – READ CAREFULLY: Usage of the Point Box software, services, and documentation (“Software”) is subject to the terms and conditions contained in this End User License Agreement (“Agreement”). This Agreement is a legal agreement between you (either an individual or a single entity) and Eclipse Market Solutions, LLC (“EMS”) dictating the use of the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("By installing or using this Software, you agree to be bound by the terms of this Agreement. If you do not agree, you may not install, copy, or use this Software and must return the Software to EMS.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("1.	OWNERSHIP. The Software is protected by copyright, patent and other intellectual property laws. You acknowledge and agree that EMS retains all right, title, and interest in the Software anywhere the Software is installed or copied. Your rights to use the Software are specified in this Agreement and EMS retains all rights not explicitly granted to you.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("2.	GRANT OF LICENSE. Subject to your compliance with the terms and conditions of this Agreement, EMS grants you a non-exclusive and non-transferable license to use one copy of the Software for your internal usage.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("3.	LIMITATIONS. You agree to the following:");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(i)	You may not assign, lease, resell or otherwise transfer any part of the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(ii)	You may not permit a third party to access the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(iii)	You may not decompile, disassemble, or reverse engineer any part of the Software or create any derivative products based on the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(iv)	You may make one copy of the Software for backup purposes.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(v)	You may not remove any copyright, patent, of other proprietary notices, symbols, or labels in the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(vi)	You may not separate the components of the Software for use on more than one computer.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(vii)	You may not use the Software in a way that violates this Agreement or any laws.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("4.	UPDATES. EMS may provide updates and patches (“Updates”), but is under no obligation to do so. Any Updates are part of the Software and will be governed by this Agreement unless you are asked to agree to new or additional terms during the installation of the Updates.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("5.	SOFTWARE SUPPORT. EMS may provide Software support services, but is under no obligation to do so.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("6.	TERMINATION. EMS may terminate or modify any portion of the Agreement with or without cause. The Agreement automatically terminates if you violate the terms of this Agreement. Upon termination of the Agreement, you must cease all usage of the Software and destroy or return all copies of the Software to EMS. If requested by EMS, you must certify in writing and at no charge to EMS that all of the Software has been destroyed or returned and that you no longer possess any portion of the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("7.	DISCLAIMER OF WARRANTY.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("EMS LICENSES THE SOFTWARE “AS IS” WITHOUT WARRANTIES OF ANY KIND. EMS DOES NOT WARRANT THAT THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT ITS OPERATION WILL BE UNINTERRUPTED OR ERROR-FREE. YOU ACKNOWLEDGE THAT THE USAGE OF THE SOFTWARE, ANY SERVICES PROVIDED BY EMS, AND THE LOCATION OF THE SOFTWARE IS AT YOUR SOLE RISK.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, EMS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, CONCERNING THE SOFTWARE, ANY SERVICES PROVIDED BY EMS, AND THE LOCATION OF THE SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, ACCURACY, AND NON-INFRINGEMENT.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY EMS SHALL CREATE ANY WARRANTIES OR IN ANY WAY INCREASE THE SCOPE OF ANY WARRANTIES HEREUNDER.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("THE SOFTWARE, ANY SERVICES PROVIDED BY EMS, AND THE LOCATION OF THE SOFTWARE ARE NOT INTENDED TO REPLACE YOUR PROFESSIONAL SKILL AND EVALUATIONS.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("8.	LIMITATION OF LIABILITY.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT WILL EMS, ITS PARENT, AFFILIATES, DIRECTORS, OFFICERS, EMPLOYEES, AGENTS, LICENSORS, DISTRIBUTORS, OR SUPPLIERS BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES (INCLUDING, WITHOUT LIMITATION, LOST PROFITS, LOSS OF INFORMATION, BUSINESS INTERRUPTION, COMPUTER MALFUNCTIONS, OR ANY OTHER LOSSES), ARISING OUT OF OR IN ANY WAY RELATING TO THIS AGREEMENT OR THE USE OR INABILITY TO USE THE SOFTWARE, ANY SERVICES PROVIDED BY EMS, AND THE LOCATION OF THE SOFTWARE, EVEN IF EMS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("IN NO EVENT WILL EMS’, ITS PARENT’, AFFILIATES’, DIRECTORS’, OFFICERS’, EMPLOYEES’, AGENTS’, LICENSORS’, DISTRIBUTORS’, OR SUPPLIERS’ CUMULATIVE LIABILITY UNDER THIS AGREEMENT EXCEED THE SUM OF THE FEES YOU PAID FOR THIS LICENSE (IF ANY).");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("9.	EXPORT CONTROL. You agree to comply with all laws, regulations, and rules regarding the export of the Software or the distribution of information about the Software, including any laws, regulations, and rules enacted following the execution of this Agreement.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("10.	INDEMNIFICATION. You agree to indemnify, defend, and hold harmless EMS, its parent, affiliates, directors, officers, employees, agents, licensors, distributors, or suppliers from all liabilities, claims, and expenses, including attorneys’ fees that arise from:");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(i)	Your use or misuse of the Software.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(ii)	Any trading activities.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(iii)	Violation of any laws.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("11.	CONFIDENTIALITY. You acknowledge to keep confidential and undisclosed any confidential information related to the Software, including screen designs, interface capabilities, documentation, and algorithms (collectively “EMS Proprietary Materials”), without the prior written consent of EMS. You agree to keep the EMS Proprietary Materials confidential for the duration of this Agreement and beyond. You acknowledge that due to the exclusive nature of EMS Proprietary Materials a breach of the obligations in this section has no adequate remedy at law. Accordingly, EMS will be entitled to appropriate relief from a court of competent jurisdiction in addition to other legal remedies that may be available.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("12.	MISCELLANEOUS.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(i)	If any provision of this Agreement is held invalid or unenforceable, then such provision will be modified to the extent necessary to make such provision enforceable, and the remaining portions of the Agreement shall remain valid and fully enforceable.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(ii)	A waiver by either of the parties hereto of any of the covenants or conditions to be performed by the other shall not be construed to be a waiver of any succeeding breach thereof or of any covenant or condition herein contained.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(iii)	This Agreement shall be governed by and construed in accordance with the internal laws of the State of New York and the parties consent to the exclusive jurisdiction of such courts and jurisdictions therein.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(iv)	This Agreement sets forth the complete and exclusive agreement between the parties relative to the subject matter hereof and supersedes all previous understandings, negotiations, contracts, or agreements whether oral or written. EMS may, at its own discretion, alter or amend the terms of this Agreement and post them on EMS’ website. You acknowledge EMS’ right to do so and agree to use the Software in accordance to the terms of the latest End User License Agreement.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(v)	You agree to establish and enforce reasonable measures to ensure compliance with this Agreement. At the request of EMS, you shall verify compliance with this Agreement in writing. With reasonable notice, EMS reserves the right to inspect your facilities to confirm compliance with this Agreement.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(vi)	The terms and conditions contained in Sections 5 through 12, including subsections, shall survive the termination or expiration of this Agreement, regardless of cause.");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append("(vii)	You may not assign or otherwise transfer this Agreement or any rights and obligations herein. ");
//        sb.append(NIOGlobal.lineSeparator());
//        sb.append(NIOGlobal.lineSeparator());
//        jAgreement.setText(sb.toString());
        
        URL fileURL=face.getKernel().getPointBoxConsoleRuntime().getPbconsoleAccessorySettings()
                .getPointBoxConsoleAgreementURL();
        try {
             Charset charset = Charset.forName("UTF-8");
             InputStreamReader isr=new InputStreamReader(fileURL.openStream(),charset);
             BufferedReader br=new BufferedReader(isr);
             jAgreement.read(br, "agreement");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PbcReleaseUpdateDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PbcReleaseUpdateDialog.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAcceptAgreement;
    private javax.swing.JTextArea jAgreement;
    private javax.swing.JCheckBox jBackgroundRunning;
    private javax.swing.JButton jDelay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jLatestReleasePanel;
    private javax.swing.JLabel jLocalReleaseCode;
    private javax.swing.JPanel jLocalReleasePanel;
    private javax.swing.JLabel jLocalVersion;
    private javax.swing.JLabel jMessageSubject;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTargetReleaseCode;
    private javax.swing.JLabel jTargetVersion;
    private javax.swing.JButton jUpdate;
    private javax.swing.JProgressBar jUpdateProgress;
    // End of variables declaration//GEN-END:variables
    
    private class PbcRollbacker extends SwingWorker<Boolean, Object>{
        
        private final String leadingRollback = "Rollback ";
        private final String pbcJarFileName = "PointBoxConsole.jar";
        
        @Override
        protected Boolean doInBackground() throws Exception {
            publish("Prepare for rollback...");
            if (NIOGlobal.isValidFolder(rollbackFolderPath)){
                File rollbackFolder = new File(rollbackFolderPath);
                File[] backupJarFiles = rollbackFolder.listFiles();
                if (backupJarFiles == null){
                    publish("Cannot find any backup files for this rollback operation.");
                    return false;
                }else{
                    String fileName;
                    File targetFile;
                    for (File backupFile : backupJarFiles){
                        fileName = backupFile.getName();
                        if (fileName.equalsIgnoreCase(pbcJarFileName)){
                            targetFile = new File(fileName);
                        }else{
                            targetFile = new File("lib"+NIOGlobal.fileSeparator()+fileName);
                        }
                        NIOGlobal.copyFile(backupFile, targetFile);
                        publish(leadingRollback + targetFile.getName() + "...");
                    }//for
                }
                return true;
            }else{
                publish("Cannot find backup folder for this rollback operation.");
                return false;
            }
        }

        @Override
        protected void process(List<Object> chunks) {
            for (Object chunk : chunks){
                if (chunk instanceof String){
                    jAgreement.setText(chunk.toString());
                    face.getKernel().updateSplashScreen(chunk.toString(), Level.INFO, 10);
                    if (chunk.toString().startsWith(leadingRollback)){
                        jUpdateProgress.setIndeterminate(false);
                        jUpdateProgress.setValue(0);
                    }
                }
                if (chunk instanceof Integer){
                    jUpdateProgress.setValue((Integer)chunk);
                }
            }
        }

        @Override
        protected void done() {
            String msg;
            try {
                Boolean result = get();
                jUpdateProgress.setIndeterminate(false);
                if (result){
                    msg = "Rollback is completed. You are required to restart your application now.";
                    jAgreement.setText(msg);
                    JOptionPane.showMessageDialog(PbcReleaseUpdateDialog.this, msg);
                    //shut down
                    shutdownForUpdateOrRollback();
                }else{
                    msg = "Rollback cannot be completed for this release. Pleasec contact PointBox administrator if you have to to do it!";
                    JOptionPane.showMessageDialog(PbcReleaseUpdateDialog.this, msg);
                    jUpdate.setEnabled(true);
                }
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, null, ex);
                msg = ex.getMessage() + " - Pleasec contact PointBox administrator!";
                jAgreement.setText(msg);
                JOptionPane.showMessageDialog(PbcReleaseUpdateDialog.this, msg);
                //shut down
                shutdownForUpdateOrRollback();
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, null, ex);
                msg = ex.getMessage() + " - Pleasec contact PointBox administrator!";
                jAgreement.setText(msg);
                JOptionPane.showMessageDialog(PbcReleaseUpdateDialog.this, msg);
                //shut down
                shutdownForUpdateOrRollback();
            }
        }
    }
    
    private void shutdownForUpdateOrRollback(){
        Runtime.getRuntime().exit(0);
    }
    
    private class PbcUpdater extends SwingWorker<Boolean, Object>{
        @Override
        protected Boolean doInBackground() throws Exception {
            if (backupCurrentVersion()){
                if (downloadForUpdate()){
                    try{
                        NIOGlobal.writeTextToNewFileSafely(" ", 
                                                            PbcProperties.generateReleaseRestartFlagFilePath(releaseInfo.getLatestReleaseCode()));
                    }catch (IOException ex){}
                    return true;
                }else{
                    undoDownloadForUpdate();
                    return false;
                }
            }else{
                undoBackupCurrentVersion();
                return false;
            }
        }

        @Override
        protected void done() {
            String msg;
            try {
                Boolean result = get();
                jUpdateProgress.setIndeterminate(false);
                if (result){
                    msg = "Your application is upgraded. You are erquired to restart your application now.";
                }else{
                    msg = "Upgrading your application failed. Pleasec contact PointBox administrator!";
                }
            } catch (InterruptedException ex) {
                logger.log(Level.SEVERE, null, ex);
                msg = ex.getMessage() + " Pleasec contact PointBox administrator! Online update was interrupted.";
            } catch (ExecutionException ex) {
                logger.log(Level.SEVERE, null, ex);
                msg = ex.getMessage() + " Pleasec contact PointBox administrator! Online update was interrupted.";
            }
            jAgreement.setText(msg);
            JOptionPane.showMessageDialog(PbcReleaseUpdateDialog.this, 
                                          "Update is completed. You are required to shut down the application and manually restart it now.");
            //shut down
            shutdownForUpdateOrRollback();
        }

        @Override
        protected void process(List<Object> chunks) {
            for (Object chunk : chunks){
                if (chunk instanceof String){
                    jAgreement.setText(chunk.toString());
                    face.getKernel().updateSplashScreen(chunk.toString(), Level.INFO, 10);
                    if (chunk.toString().startsWith("Download ")){
//                        jUpdateProgress.setIndeterminate(false);
//                        jUpdateProgress.setValue(0);
                    }
                }
                if (chunk instanceof Integer){
                    jUpdateProgress.setValue((Integer)chunk);
                }
            }
        }

        private boolean backupCurrentVersion() {
            publish("Prepare for rollback...");
            if (NIOGlobal.isValidFolder(rollbackFolderPath)){
                if (!NIOGlobal.deleteFolder(rollbackFolderPath)){
                    return false;
                }
            }
            File backupFolder = NIOGlobal.createFolder(rollbackFolderPath);
            if (backupFolder == null){
                return false;
            }
//            if (releaseInfo.getPbcReleaseStatus().equals(PbcReleaseStatus.Supported_Previous_Release)){
            /**
             * ALWAYS backup the current version now. Ignore the server-side PbcReleaseStatus
             */
                try {
                    Set<String> keys = origPackagePaths.keySet();
                    Iterator<String> itr = keys.iterator();
                    String orig;
                    String dest;
                    String key;
                    while(itr.hasNext()){
                        key = itr.next();
                        orig = origPackagePaths.get(key);
                        dest = backupPackagePaths.get(key);
                        publish("backup " + orig);
                        try{
                            NIOGlobal.copyFile(orig, dest);
                        } catch (FileNotFoundException ex) {
                            logger.log(Level.WARNING, "COPY FROM: " + orig + "; TO: " + dest , ex);
                        } catch (IOException ex) {
                            logger.log(Level.WARNING, "COPY FROM: " + orig + "; TO: ", ex);
                        }
                    }//while
                } catch (Exception ex){
                    logger.log(Level.SEVERE, null, ex);
                    return false;
                }
                return true;
//            }else{
//                return downloadForRollback();
//            }
        }

        private void undoBackupCurrentVersion() {
            String localReleaseCode = releaseInfo.getLocalReleaseCode();
            if (NIOGlobal.isValidFolder(localReleaseCode)){
                if (!NIOGlobal.deleteFolder(localReleaseCode)){
                    logger.log(Level.SEVERE, "cannot delete the folder - {0}", localReleaseCode);
                }
            }
        }

        private boolean downloadForRollback() {
            publish("Start to prepare rollback packages for upgrading your application ...");
            return downloadFiles(releaseInfo.getRollbackPackageUpdateDetails(),
                                 backupPackagePaths);
        }

        private boolean downloadForUpdate() {
            publish("Start to download latest packages for upgrading your application ...");
            return downloadFiles(releaseInfo.getLatestPackageUpdateDetails(),
                                 origPackagePaths);
        }
        
        private boolean downloadFiles(PackageUpdateInfo[] updateInfoList, HashMap<String, String> packagePaths){
            if (updateInfoList == null){
                return true;
            }
            boolean timeout = false;
            try {
                String filename;
                PackageUpdateInfo updateInfo;
                for (int i =0 ; i < updateInfoList.length; i++){
                    updateInfo = updateInfoList[i];
                    filename = packagePaths.get(updateInfo.getPointBoxPackage());
                    if (DataGlobal.isEmptyNullString(filename)){
                        throw new IOException("Download URL is unknown for " + updateInfo.getPointBoxPackage());
                    }
                    publish("Download " + filename + "...");
                    String urlInfo = updateInfo.getUrl();
                    if (urlInfo.contains("localhost")){
                        urlInfo = urlInfo.replace("localhost", 
                                                   PointBoxServerIPs.TestingLocalHostIP.toString());
                    }else if (urlInfo.contains(PointBoxServerIPs.LocalHostDigitIP.toString())){
                        urlInfo = urlInfo.replace(PointBoxServerIPs.LocalHostDigitIP.toString(), 
                                                  PointBoxServerIPs.TestingLocalHostIP.toString());
                    }
                    URL url = new URL(urlInfo); 
                    ReadableByteChannel rbc = Channels.newChannel(url.openStream()); 
                    FileOutputStream fos = new FileOutputStream(filename);  
                    fos.getChannel().transferFrom(rbc, 0, 1 << 24); //1 << 24 = 2^24
                }//for
            } catch (MalformedURLException ex) {
                logger.log(Level.SEVERE, null, ex);
                return false;
            } catch (IOException ex) {
                logger.log(Level.SEVERE, null, ex);
                return false;
            } catch (Exception ex){
                logger.log(Level.SEVERE, null, ex);
                return false;
            }
            
            if (timeout){
                return false;
            }else{
                return true;
            }
        }

        private void undoDownloadForUpdate() {
            PackageUpdateInfo[] updateInfoList = releaseInfo.getLatestPackageUpdateDetails();
            if (updateInfoList == null){
                logger.log(Level.SEVERE, "updateInfoList should not be NULL or empty", new Exception("updateInfoList should not be NULL or empty"));
                return;
            }
            try {
                String orig;
                PackageUpdateInfo updateInfo;
                for (int i =0 ; i < updateInfoList.length; i++){
                    updateInfo = updateInfoList[i];
                    orig = origPackagePaths.get(updateInfo.getPointBoxPackage().toString());
                    publish("Prepare for " + orig + "...");
                    try{
                        NIOGlobal.deleteFile(orig);
                    } catch (FileNotFoundException ex) {
                        logger.log(Level.WARNING, orig , ex);
                    } catch (IOException ex) {
                        logger.log(Level.WARNING, orig, ex);
                    }
                }//for
            } catch (Exception ex){
                logger.log(Level.SEVERE, null, ex);
            }
            undoBackupCurrentVersion();
        }
    
    }
    public static enum Purpose {

        Update("Update"),
        Rollback("Rollback");
        private String term;

        Purpose(String term) {
            this.term = term;
        }

        public static Purpose convertToType(String term) {
            if (term == null) {
                return null;
            }
            if (term.equalsIgnoreCase(Update.toString())) {
                return Update;
            } else if (term.equalsIgnoreCase(Rollback.toString())) {
                return Rollback;
            } else {
                return null;
            }
        }

        @Override
        public String toString() {
            return term;
        }
    }
}
