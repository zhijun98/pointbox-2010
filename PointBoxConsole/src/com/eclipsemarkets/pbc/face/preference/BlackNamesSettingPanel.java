/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eclipsemarkets.pbc.face.preference;

import com.eclipsemarkets.gateway.user.GatewayBuddyListFactory;
import com.eclipsemarkets.gateway.user.IGatewayConnectorBuddy;
import com.eclipsemarkets.global.SwingGlobal;
import com.eclipsemarkets.pbc.face.IPbcFace;
import com.eclipsemarkets.pbc.kernel.PointBoxConsoleProperties;
import com.eclipsemarkets.storage.constant.GatewayServerType;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.*;

/**
 *
 * @author Administrator
 */
public class BlackNamesSettingPanel extends javax.swing.JPanel implements IPreferenceComponentPanel{

    private IPbcFace face;
    /**
     * Creates new form BlackNamesSettingPanel
     */
    public BlackNamesSettingPanel(IPbcFace face) {
        this.face=face;
  
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jBlackNames = new javax.swing.JList();
        jUnBlockBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Blocked Buddies"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue)); // NOI18N

        jBlackNames.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jBlackNames);

        jUnBlockBtn.setText("Unblock");
        jUnBlockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUnBlockBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("* names in the brackets refer to your IM login usernames");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jUnBlockBtn)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUnBlockBtn)
                    .addComponent(jLabel1)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void jUnBlockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUnBlockBtnActionPerformed
        // TODO add your handling code here:
        BlackNameWrapper wrapper=(BlackNameWrapper)jBlackNames.getSelectedValue();
        if(wrapper==null){
            JOptionPane.showMessageDialog(this, "Please select a buddy which you want to unblock!");
            return;           
        }
        if (JOptionPane.showConfirmDialog(this,
                "Are you sure to unblock this buddy?",
                "Confirm", JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION) 
        {
            face.getKernel().removeBlackNameEntry(face.getPointBoxLoginUser().getIMUniqueName(), wrapper.blackName, wrapper.serverType.toString(), wrapper.loginUserName);
        }
       
        display();
    }//GEN-LAST:event_jUnBlockBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jBlackNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jUnBlockBtn;
    // End of variables declaration//GEN-END:variables

   
    @Override
    public void populateSettings() {
        if (SwingUtilities.isEventDispatchThread()){
            populateSettingsHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    populateSettingsHelper();
                }
            });
        
        }
    }

    @Override
    public void updateSettings() {
        if (SwingUtilities.isEventDispatchThread()){
            updateSettingsHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    updateSettingsHelper();
                }
            });
        }
    }

    private void populateSettingsHelper() {
        display();
    }

    private void updateSettingsHelper() {
        //throw new UnsupportedOperationException("Not yet implemented");
    }
    
      @Override
    public void setVisible(boolean value) {
        if (value){
            displayFaceComponent();
        }else{
            hideFaceComponent();
        }
    }

    public void close() {
        hideFaceComponent();
    }

    public void display() {
        displayFaceComponent();
    }

    


    private void displayFaceComponent(){
        populateBlackNamesItemsInEDT();

        super.setVisible(true);
    }
    
    

    public void hideFaceComponent() {
        if (SwingUtilities.isEventDispatchThread()){
            hideFaceComponentHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    hideFaceComponentHelper();
                }
            });
        }
    }

    private void hideFaceComponentHelper(){ 
        super.setVisible(false);
      
    }

    private void populateBlackNamesItemsInEDT() {
        if(SwingUtilities.isEventDispatchThread()){
           populateBlackNameItemsInEDTHelper();
       }else{
           SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    populateBlackNameItemsInEDTHelper();
                }
            });
       }
    }

    private void populateBlackNameItemsInEDTHelper() {

        new SwingWorker<Void, String>(){
            @Override
            protected Void doInBackground() throws Exception {
                jBlackNames.setModel(new DefaultListModel());
                jBlackNames.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                
                List<String> blackNames = face.getKernel().retrieveAllBlackNames(face.getPointBoxLoginUser().getIMUniqueName());
                //publish
                for (String blackNameEntry : blackNames){
                       publish(blackNameEntry);
                 }
                return null;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String blackNameEntry : chunks){
                    String[] arrayStr=blackNameEntry.split(":");
                    if(arrayStr.length>1){
                        String IMloginUserName=arrayStr[0]; //IMUniqueName
                        String blackName=arrayStr[1];   //screenName
                        IGatewayConnectorBuddy tempBuddy=GatewayBuddyListFactory.convertToLoginUserInstance(IMloginUserName);
                        BlackNameWrapper wrapper=new BlackNameWrapper(blackName, tempBuddy.getIMScreenName(), tempBuddy.getIMServerType());
                        ((DefaultListModel)jBlackNames.getModel()).addElement(wrapper); 
                    }
                }
            }

            @Override
            protected void done() {
                jBlackNames.setSelectedIndex(-1);
                //jBlackNames.setCellRenderer(new BlackNamesListRenderer()); 
            }
        }.execute();
    }
    
    
    class BlackNamesListRenderer extends DefaultListCellRenderer {

        Color originalLabelForeground;
        BlackNamesListRenderer() {
            originalLabelForeground = this.getBackground();
        }
        
        
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            
            BlackNameWrapper  wrapper = (BlackNameWrapper) value;

            Icon icon;
            if(wrapper.serverType.equals(GatewayServerType.AIM_SERVER_TYPE)){
                icon=face.getKernel().getPointBoxConsoleRuntime().getPbcImageSettings().getAimBuddyIcon();
            }else if(wrapper.serverType.equals(GatewayServerType.YIM_SERVER_TYPE)){
                icon=face.getKernel().getPointBoxConsoleRuntime().getPbcImageSettings().getYahooBuddyIcon();
            }else{
                icon=face.getKernel().getPointBoxConsoleRuntime().getPbcImageSettings().getPbimBuddyIcon();
            }

            
            setIcon(icon);
            setText(" ("+wrapper.loginUserName+")  "+wrapper.blackName);
            setFont(SwingGlobal.getLabelFont());
            
            if(isSelected){
                setBackground(Color.YELLOW);
            }else{
                setBackground(Color.WHITE);
            }
            return this;
        }
    }
    
     class BlackNameWrapper{
       private String blackName; //screenName
       private String loginUserName;//screenName
       private GatewayServerType serverType;
       
       public BlackNameWrapper(String blackName, String loginUserName, GatewayServerType serverType){
           this.blackName=blackName;
           this.loginUserName=loginUserName;
           this.serverType=serverType;
       }
       
        @Override
        public String toString(){
            return "["+serverType+"] "+blackName+" ("+loginUserName+")";
        }
   }
}
