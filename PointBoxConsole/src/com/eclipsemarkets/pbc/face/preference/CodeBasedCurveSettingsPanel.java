/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eclipsemarkets.pbc.face.preference;

import com.eclipsemarkets.data.PointBoxQuoteCode;
import com.eclipsemarkets.pbc.face.IPbcFace;
import com.eclipsemarkets.web.pbc.PbcPricingModel;
import com.eclipsemarkets.web.pbc.PricingCurveFileSettings;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Zhijun Zhang
 */
public class CodeBasedCurveSettingsPanel extends javax.swing.JPanel {

    private static final String defaultText = "(Default)";
    
    private PbcPricingModel pbcPricingModel;
    private final List<CurvePanel> aCurvePanelList;
    private IPbcFace face;
    /**
     * Creates new form CodeBasedCurveSettingsPanel
     */
    public CodeBasedCurveSettingsPanel(IPbcFace face, PbcPricingModel aPbcPricingModel) {
        initComponents();
        this.face = face;
        this.pbcPricingModel = aPbcPricingModel;
        aCurvePanelList = new ArrayList<CurvePanel>();
        
        refreshTitle();
        
        initializeCurvePanels();
        
        if (face.getKernel().isPbcPricingAdmin()){
            jUploadEnabled.setVisible(true);
            jUploadEnabled.setSelected(true);
            jUploadAll.setVisible(true);
            jSeparator1.setVisible(true);
            jSeparator2.setVisible(true);
        }else{
            jUploadEnabled.setVisible(false);
            jUploadEnabled.setSelected(false);
            jUploadAll.setVisible(false);
            jSeparator1.setVisible(false);
            jSeparator2.setVisible(false);
        }
        
    }
    
    void refreshTitle(){
        if (SwingUtilities.isEventDispatchThread()){
            refreshTitleHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    refreshTitleHelper();
                }
            });
        }
    }
    
    void downloadCurveFiles(final boolean displayMessage){
        (new CurveFileDownloader(face.getKernel(), 
                                 pbcPricingModel.getSqCode(), 
                                 retrievePricingCurveFileSettingsArray(), 
                                 displayMessage)).execute();
    }
    
    void uploadCurveFiles(final boolean displayMessage){
        if (SwingUtilities.isEventDispatchThread()){
            uploadCurveFilesHelper(displayMessage);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    uploadCurveFilesHelper(displayMessage);
                }
            });
        }
    }
    
    private void uploadCurveFilesHelper(boolean displayMessage){
        if (!face.getKernel().isPbcPricingAdmin()){
            return;
        }
        synchronized(aCurvePanelList){
            for (CurvePanel aCurvePanel : aCurvePanelList){
                aCurvePanel.uploadCurveFile(false);
            }
        }
        if (displayMessage){
            JOptionPane.showMessageDialog(null, "Complete uploading all the files.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jDownloadAll = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jUploadEnabled = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jUploadAll = new javax.swing.JButton();
        jCurvePanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Code: ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        jDownloadAll.setText("Download All");
        jDownloadAll.setFocusable(false);
        jDownloadAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jDownloadAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jDownloadAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDownloadAllActionPerformed(evt);
            }
        });
        jToolBar1.add(jDownloadAll);
        jToolBar1.add(jSeparator2);

        jUploadEnabled.setSelected(true);
        jUploadEnabled.setText("Upload Enabled");
        jUploadEnabled.setFocusable(false);
        jUploadEnabled.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jUploadEnabled.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jUploadEnabled);
        jToolBar1.add(jSeparator1);

        jUploadAll.setText("Upload All");
        jUploadAll.setFocusable(false);
        jUploadAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jUploadAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jUploadAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUploadAllActionPerformed(evt);
            }
        });
        jToolBar1.add(jUploadAll);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        add(jCurvePanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jUploadAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUploadAllActionPerformed
        uploadCurveFiles(true);
    }//GEN-LAST:event_jUploadAllActionPerformed

    private void jDownloadAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDownloadAllActionPerformed
        downloadCurveFiles(true);
    }//GEN-LAST:event_jDownloadAllActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jCurvePanel;
    private javax.swing.JButton jDownloadAll;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jUploadAll;
    private javax.swing.JCheckBox jUploadEnabled;
    // End of variables declaration//GEN-END:variables

    private void refreshTitleHelper() {
        PointBoxQuoteCode code = PointBoxQuoteCode.convertEnumNameToType(pbcPricingModel.getSqCode());
        if (face.getKernel().getDefaultSimCodeFromProperties().name().equalsIgnoreCase(pbcPricingModel.getSqCode())){
            ((TitledBorder)getBorder()).setTitle(code.toString()+ " " + defaultText);
        }else{
            ((TitledBorder)getBorder()).setTitle(code.toString());
        }
    }

    private void initializeCurvePanels() {
        if (pbcPricingModel.getPricingCurveFileSettingsArray() == null){
            return;
        }
        PricingCurveFileSettings[] aPricingCurveFileSettingsArray = pbcPricingModel.getPricingCurveFileSettingsArray();
        int rows = aPricingCurveFileSettingsArray.length;
        jCurvePanel.setLayout(new java.awt.GridLayout(rows, 1, 2, 10));
        CurvePanel aPanel;
        synchronized(aCurvePanelList){
            for (PricingCurveFileSettings aPricingCurveFileSettings : aPricingCurveFileSettingsArray){
                aPanel = new CurvePanel(face, aPricingCurveFileSettings, pbcPricingModel.getSqCode(), true);
                aCurvePanelList.add(aPanel);
                jCurvePanel.add(aPanel);
            }
        }
    }

    private List<PricingCurveFileSettings> retrievePricingCurveFileSettingsArray() {
        List<PricingCurveFileSettings> result = new ArrayList<PricingCurveFileSettings>();
        synchronized(aCurvePanelList){
            for (CurvePanel aCurvePanel : aCurvePanelList){
                if (aCurvePanel.isDownloadPermitted()){
                    result.add(aCurvePanel.getPricingCurveFileSettings());
                }
            }
        }
        return result;
    }
}
