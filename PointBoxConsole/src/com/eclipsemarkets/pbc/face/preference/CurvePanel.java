/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eclipsemarkets.pbc.face.preference;

import com.eclipsemarkets.data.PointBoxCurveType;
import com.eclipsemarkets.data.PointBoxQuoteCode;
import com.eclipsemarkets.pbc.face.IPbcFace;
import com.eclipsemarkets.pbc.kernel.PointBoxConsoleProperties;
import com.eclipsemarkets.web.pbc.PricingCurveFileSettings;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Zhijun Zhang
 */
public class CurvePanel extends javax.swing.JPanel {

    private IPbcFace face;
    private PricingCurveFileSettings pricingCurveFileSettings;
    private String codeValue;
    
    /**
     * Creates new form CurvePanel
     */
    public CurvePanel(IPbcFace face, PricingCurveFileSettings aPricingCurveFileSettings, String codeValue, boolean uploadEnabled) {
        initComponents();
        
        this.face = face;
        this.pricingCurveFileSettings = aPricingCurveFileSettings;
        this.codeValue = codeValue;
        
        jCurveTypeLocation.setText(aPricingCurveFileSettings.getCurveType());
        
        PointBoxConsoleProperties config = PointBoxConsoleProperties.getSingleton();
        jDownloadOneEnabled.setSelected(config.retrieveCurveDownloadStatus(face.getPointBoxLoginUser(), codeValue, aPricingCurveFileSettings.getCurveType()));
        jUploadOneEnabled.setSelected(uploadEnabled);
        
        if (face.getKernel().isPbcPricingAdmin()){
            jUploadOneEnabled.setVisible(true);
            jUploadOneEnabled.setSelected(true);
            jUploadOne.setVisible(true);
        }else{
            jUploadOneEnabled.setVisible(false);
            jUploadOne.setVisible(false);
            jUploadOneEnabled.setSelected(false);
        }
    }

    public boolean isDownloadPermitted(){
        return jDownloadOneEnabled.isSelected();
    }
    
    public PricingCurveFileSettings getPricingCurveFileSettings() {
        return pricingCurveFileSettings;
    }
    
    void uploadCurveFile(final boolean displayMessage){
        if (!jUploadOneEnabled.isSelected()){
            return;
        }
        if (!face.getKernel().isPbcPricingAdmin()){
            return;
        }
        (new SwingWorker<String, Void>(){
            @Override
            protected String doInBackground() throws Exception {
                PointBoxQuoteCode code = PointBoxQuoteCode.convertEnumNameToType(codeValue);
                PointBoxCurveType type = PointBoxCurveType.convertEnumValueToType(pricingCurveFileSettings.getCurveType());
                String filePath = face.getKernel().getLocalCurveFileFullPath(code, pricingCurveFileSettings, true);
                return face.getKernel().uploadPricingRuntimeSettingsFilesToPointBoxServer(code, 
                                                                                        type, 
                                                                                        filePath);
            }//doInBackground

            @Override
            protected void done() {
                try {
                    String status = get();
                    if (displayMessage){
                        if (status == null){
                            JOptionPane.showMessageDialog(null, "Successfully uploaded the file.");
                        }else{
                            JOptionPane.showMessageDialog(null, "Failed to uploaded the file. " + status);
                        }
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(CurvePanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(CurvePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }).execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCurveTypeLocation = new javax.swing.JLabel();
        jDownloadOne = new javax.swing.JButton();
        jDownloadOneEnabled = new javax.swing.JCheckBox();
        jUploadOne = new javax.swing.JButton();
        jUploadOneEnabled = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridLayout(1, 4, 5, 0));

        jCurveTypeLocation.setText("Curve");
        add(jCurveTypeLocation);

        jDownloadOne.setText("Download");
        jDownloadOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDownloadOneActionPerformed(evt);
            }
        });
        add(jDownloadOne);

        jDownloadOneEnabled.setSelected(true);
        jDownloadOneEnabled.setText("Enabled");
        jDownloadOneEnabled.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jDownloadOneEnabledItemStateChanged(evt);
            }
        });
        add(jDownloadOneEnabled);

        jUploadOne.setText("Upload");
        jUploadOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUploadOneActionPerformed(evt);
            }
        });
        add(jUploadOne);

        jUploadOneEnabled.setSelected(true);
        jUploadOneEnabled.setText("Enabled");
        jUploadOneEnabled.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jUploadOneEnabledItemStateChanged(evt);
            }
        });
        add(jUploadOneEnabled);
    }// </editor-fold>//GEN-END:initComponents

    private void jDownloadOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDownloadOneActionPerformed
        if (jDownloadOneEnabled.isSelected()){
            ArrayList<PricingCurveFileSettings> aPricingCurveFileSettingsList = new ArrayList<PricingCurveFileSettings>();
            aPricingCurveFileSettingsList.add(pricingCurveFileSettings);
            (new CurveFileDownloader(face.getKernel(), 
                                     codeValue, 
                                     aPricingCurveFileSettingsList, 
                                     true)).execute();
        }
    }//GEN-LAST:event_jDownloadOneActionPerformed

    private void jUploadOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUploadOneActionPerformed
        uploadCurveFile(true);
    }//GEN-LAST:event_jUploadOneActionPerformed

    private void jUploadOneEnabledItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jUploadOneEnabledItemStateChanged
        if (ItemEvent.DESELECTED == evt.getStateChange()){
            jUploadOne.setEnabled(false);
        }
        
        if (ItemEvent.SELECTED == evt.getStateChange()){
            jUploadOne.setEnabled(true);
        }
    }//GEN-LAST:event_jUploadOneEnabledItemStateChanged

    private void jDownloadOneEnabledItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jDownloadOneEnabledItemStateChanged
        if (ItemEvent.DESELECTED == evt.getStateChange()){
            PointBoxConsoleProperties.getSingleton().setCurveDownloadStatus(face.getPointBoxLoginUser(), codeValue, jCurveTypeLocation.getText(), false);
        }else if (ItemEvent.SELECTED == evt.getStateChange()){
            PointBoxConsoleProperties.getSingleton().setCurveDownloadStatus(face.getPointBoxLoginUser(), codeValue, jCurveTypeLocation.getText(), true);
        }
    }//GEN-LAST:event_jDownloadOneEnabledItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jCurveTypeLocation;
    private javax.swing.JButton jDownloadOne;
    private javax.swing.JCheckBox jDownloadOneEnabled;
    private javax.swing.JButton jUploadOne;
    private javax.swing.JCheckBox jUploadOneEnabled;
    // End of variables declaration//GEN-END:variables
}
