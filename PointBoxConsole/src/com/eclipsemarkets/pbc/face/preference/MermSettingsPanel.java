/**
 * Eclipse Market Solutions LLC
 *
 * MermSettingsPanel.java
 *
 * @author Zhijun Zhang
 * Created on May 27, 2010, 6:58:35 PM
 */

package com.eclipsemarkets.pbc.face.preference;

import com.eclipsemarkets.data.PointBoxQuoteGroup;
import com.eclipsemarkets.event.PointBoxEventTarget;
import com.eclipsemarkets.event.face.MermAccessRecordChangedEvent;
import com.eclipsemarkets.global.DataGlobal;
import com.eclipsemarkets.global.NIOGlobal;
import com.eclipsemarkets.pbc.face.IPbcFace;
import com.eclipsemarkets.pbc.face.PbsysFileFilter;
import com.eclipsemarkets.pbc.kernel.PointBoxConsoleProperties;
import com.eclipsemarkets.pbc.runtime.settings.IPbconsoleAccessorySettings;
import com.eclipsemarkets.web.pbc.PbcPricingModel;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author Zhijun Zhang
 */
class MermSettingsPanel extends javax.swing.JPanel implements IPreferenceComponentPanel {
    private static final long serialVersionUID = 1L;

    private IPbcFace face;
    private JFileChooser fileChooser;

    MermSettingsPanel(IPbcFace face) {
        initComponents();
        this.face = face;
        fileChooser = new JFileChooser();
        
        this.jJavaVersion.setText(DataGlobal.getJavaVersion() + " (" + DataGlobal.getJvmBitness() + "bit)");
        this.jMsAccessBitness.setText(DataGlobal.getJvmBitness() + "bit");
        
        populateSettings();
    }

    @Override
    public final void populateSettings() {
        if (SwingUtilities.isEventDispatchThread()){
            populateSettingsHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    populateSettingsHelper();
                }
            });
        }
    }
    
    private IPbconsoleAccessorySettings getPbconsoleAccessorySettings(){
        return face.getKernel().getPointBoxConsoleRuntime().getPbconsoleAccessorySettings();
    }
    
    private void populateSettingsHelper(){
        String path = PointBoxConsoleProperties.getSingleton().retrieveMermAccessPath();
        if (!NIOGlobal.isValidFile(path)){
            path = "";
        }
        jAccessPath.setText(path);
    }

    @Override
    public void updateSettings() {
        if (SwingUtilities.isEventDispatchThread()){
            updateSettingsHelper();
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    updateSettingsHelper();
                }
            });
        }
    }
    private void updateSettingsHelper(){
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jAccessPathSelect = new javax.swing.JButton();
        jAccessPath = new javax.swing.JTextField();
        jDisableMsAccessBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jJavaVersion = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jMsAccessBitness = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("MS Access Database (Optional):"));
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText("Access Full Path:");
        jLabel1.setName("jLabel1"); // NOI18N

        jAccessPathSelect.setText("File Path");
        jAccessPathSelect.setName("jAccessPathSelect"); // NOI18N
        jAccessPathSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAccessPathSelectActionPerformed(evt);
            }
        });

        jAccessPath.setEditable(false);
        jAccessPath.setName("jAccessPath"); // NOI18N

        jDisableMsAccessBtn.setText("Disable");
        jDisableMsAccessBtn.setName("jDisableMsAccessBtn"); // NOI18N
        jDisableMsAccessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDisableMsAccessBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Current Java Runtime Environment: ");
        jLabel3.setName("jLabel3"); // NOI18N

        jJavaVersion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jJavaVersion.setText("jLabel4");
        jJavaVersion.setName("jJavaVersion"); // NOI18N

        jLabel5.setText("Required Version of MS Access: ");
        jLabel5.setName("jLabel5"); // NOI18N

        jMsAccessBitness.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jMsAccessBitness.setForeground(new java.awt.Color(255, 0, 0));
        jMsAccessBitness.setText("jLabel6");
        jMsAccessBitness.setName("jMsAccessBitness"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jAccessPathSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDisableMsAccessBtn))
                    .addComponent(jAccessPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jMsAccessBitness)
                            .addComponent(jJavaVersion))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jAccessPathSelect)
                    .addComponent(jDisableMsAccessBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAccessPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jJavaVersion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jMsAccessBitness))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jAccessPathSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAccessPathSelectActionPerformed
        if (filePathSelect(jAccessPath)){
            enableMsAccess();
        }
}//GEN-LAST:event_jAccessPathSelectActionPerformed

    private boolean filePathSelect(JTextField jFilePathField){
        String existingDirectory = jFilePathField.getText();
        String newPath = getFileFromFileChooserWithLastDirectory(new PbsysFileFilter("mdb"), existingDirectory);
        File selectedPathFile = new File(newPath);
        if (selectedPathFile.exists() && (newPath.length() > 0)) {
            if (!newPath.equalsIgnoreCase(jFilePathField.getText())){
                if (JOptionPane.showConfirmDialog(face.getPointBoxMainFrame(), 
                                                  "Do you want to change it now?",
                                                  "Confirm", JOptionPane.YES_NO_OPTION)
                        == JOptionPane.YES_OPTION)
                {
                    if (newPath.endsWith(".mdb")){
                        jFilePathField.setText(newPath);
                    }
                    return true;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "The directory or file you chose does not exist. If you want to disable MS Access, please click DISABLE button.");
        }
        return false;
    }
    
    private void jDisableMsAccessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDisableMsAccessBtnActionPerformed

        String existingDirectory = jAccessPath.getText();
        if (DataGlobal.isNonEmptyNullString(existingDirectory)){
            if (JOptionPane.showConfirmDialog(null, 
                                              "Do you want to disable MS Access connection now?",
                                              "Confirm", JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION)
            {
                disableMsAccess(null);}
        }
    }//GEN-LAST:event_jDisableMsAccessBtnActionPerformed

    /**
     * If mdbPath is NULL or empty, the entire PbcStorageAgent for MS-Access will be stopped. 
     * However, its quote buffer still works for the PbcStorageAgent instance. When a new valid 
     * mdbPath is assigned, PbcStorageAgent can be re-started.
     * @param mdbPath 
     */
    void disableMsAccess(final String mdbPath) {
        if (SwingUtilities.isEventDispatchThread()){
            disableMsAccessHelper(mdbPath);
        }else{
            SwingUtilities.invokeLater(new Runnable(){
                @Override
                public void run() {
                    disableMsAccessHelper(mdbPath);
                }
            });
        }
    }
    
    private void disableMsAccessHelper(String mdbPath){
        if (DataGlobal.isEmptyNullString(mdbPath)){
            jAccessPath.setText("");
            PbcPricingModel aPbcPricingModel = face.getKernel().getDefaultPbcPricingModel();
            PointBoxQuoteGroup aPointBoxQuoteGroup = PointBoxQuoteGroup.convertEnumValueToType(aPbcPricingModel.getSqGroup());
            PointBoxConsoleProperties.getSingleton().storeMermAccessPath(aPointBoxQuoteGroup,
                                                                         "");
            face.getKernel().raisePointBoxEvent(new MermAccessRecordChangedEvent(PointBoxEventTarget.PbcStorage));
        }else{
            jAccessPath.setText(mdbPath);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAccessPath;
    private javax.swing.JButton jAccessPathSelect;
    private javax.swing.JButton jDisableMsAccessBtn;
    private javax.swing.JLabel jJavaVersion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jMsAccessBitness;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    String getFileFromFileChooserWithLastDirectory(PbsysFileFilter filter, String lastSelectedPath){
        String result;
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        if (filter != null){
            fileChooser.setFileFilter(filter);
        }

        if (!lastSelectedPath.isEmpty()){
            File existingDirectoryOrFile = new File(lastSelectedPath);
            if (existingDirectoryOrFile.isDirectory()){
                fileChooser.setCurrentDirectory(existingDirectoryOrFile);
            }
            else if (existingDirectoryOrFile.isFile()){
                fileChooser.setSelectedFile(existingDirectoryOrFile);
            }
        }

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            result = fileChooser.getSelectedFile().getAbsolutePath();
        }
        else{
            return "";
        }

        if (filter != null && !result.isEmpty() && !result.substring(result.lastIndexOf("."),result.length()).equalsIgnoreCase(filter.getDescription())){
            return result + filter.getDescription();
        }

        return result;
    }

    String getMdbPath() {
        return jAccessPath.getText();
    }

    private void enableMsAccess() {
        PbcPricingModel aPbcPricingModel = face.getKernel().getDefaultPbcPricingModel();
        PointBoxQuoteGroup aPointBoxQuoteGroup = PointBoxQuoteGroup.convertEnumValueToType(aPbcPricingModel.getSqGroup());
        PointBoxConsoleProperties.getSingleton().storeMermAccessPath(aPointBoxQuoteGroup,
                                                                     jAccessPath.getText());
        face.getKernel().raisePointBoxEvent(new MermAccessRecordChangedEvent(PointBoxEventTarget.PbcStorage));
    }

    private Thread automaticMsAccessConnectingThread = null;
    synchronized void invokeAutomaticMsAccessConnection() {
        stopAutomaticMsAccessConnectingThread();
        automaticMsAccessConnectingThread = new Thread(new Runnable(){
            @Override
            public void run() {
                boolean looping = true;
                while (looping){
                    if (NIOGlobal.isValidFile(jAccessPath.getText())){
                        enableMsAccess();
                        looping = false;
                    }
                    try {
                        Thread.sleep(1000*15);
                    } catch (InterruptedException ex) {
                        //Logger.getLogger(MermSettingsPanel.class.getName()).log(Level.SEVERE, null, ex);
                        looping = false;
                    }
                }//while
            }
        });
        automaticMsAccessConnectingThread.start();
    }

    private synchronized void stopAutomaticMsAccessConnectingThread(){
        if (automaticMsAccessConnectingThread != null){
            automaticMsAccessConnectingThread.interrupt();
            automaticMsAccessConnectingThread = null;
        }
    }
    
    void unloadMermSettingsPanel() {
        stopAutomaticMsAccessConnectingThread();
    }

}
