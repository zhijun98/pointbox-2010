/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eclipsemarkets.pbc.face.preference;

import com.eclipsemarkets.data.PointBoxQuoteCode;
import com.eclipsemarkets.global.DataGlobal;
import com.eclipsemarkets.data.PointBoxCurveType;
import com.eclipsemarkets.web.PbcAccountBasedSettings;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JCheckBox;

/**
 * This class has bad implementation. If it is for NG, it is OK. For other types 
 * such as CO, it need redesign. ZZJ
 *
 * @author chen.yuan
 */
public class UploadControlPanel extends javax.swing.JPanel {

    private PointBoxQuoteCode symbol;
    private HashMap<JCheckBox, PointBoxCurveType> types;
    private ArrayList<JCheckBox> checkBoxList;

    private PbcAccountBasedSettings aPbcPricingAdminSettings;
    
    /**
     * Creates new form UploadControlPanel
     */
    public UploadControlPanel(PointBoxQuoteCode symbol, PbcAccountBasedSettings aPbcPricingAdminSettings) {
        super();
        this.symbol = symbol;
        initComponents();
        
        if (aPbcPricingAdminSettings == null){
            jFrequency.setText("10");
            jUploadType.setText("Disabled");
        }else{
            jFrequency.setText("" + aPbcPricingAdminSettings.getFrequency());
            if (aPbcPricingAdminSettings.getUploadCurveType() == 2){
                jUploadType.setText("Manual & Auto Upload");
            }else{
                jUploadType.setText("Manual Upload");
            }
        }
        types = new HashMap<JCheckBox, PointBoxCurveType>();
        checkBoxList = new ArrayList<JCheckBox>();
        this.setVisible(true);
        //layout management
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlBox = new javax.swing.JCheckBox();
        checkBoxPanel = new javax.swing.JPanel();
        jFrequency = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jUploadType = new javax.swing.JLabel();

        controlBox.setSelected(true);
        controlBox.setText(symbol.name());
        controlBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlBoxActionPerformed(evt);
            }
        });

        checkBoxPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        checkBoxPanel.setOpaque(false);
        checkBoxPanel.setLayout(new java.awt.GridLayout(0, 3));

        jFrequency.setText("jTextField1");
        jFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFrequencyFocusLost(evt);
            }
        });

        jLabel1.setText("Auto-Interval (sec):");

        jUploadType.setForeground(new java.awt.Color(0, 0, 255));
        jUploadType.setText("UpType");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(controlBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jUploadType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(controlBox)
                    .addComponent(jFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jUploadType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void controlBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlBoxActionPerformed
        if (controlBox.isSelected()) {
            checkBoxPanel.setVisible(true);
        } else {
            checkBoxPanel.setVisible(false);
            
        }
    }//GEN-LAST:event_controlBoxActionPerformed

    private void jFrequencyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFrequencyFocusLost
        if (aPbcPricingAdminSettings != null){
            int freq = DataGlobal.convertToInteger(jFrequency.getText());
            if ((freq >= 5) && (freq <= 600)){
                aPbcPricingAdminSettings.setFrequency(freq);
            }
        }
    }//GEN-LAST:event_jFrequencyFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel checkBoxPanel;
    private javax.swing.JCheckBox controlBox;
    private javax.swing.JTextField jFrequency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jUploadType;
    // End of variables declaration//GEN-END:variables

    public PointBoxQuoteCode getSymbol() {
        return this.symbol;
    }
    
    public int getCheckBoxCount() {
        return 1 + types.size();
    }
    
    public boolean isSelected() {
        return controlBox.isSelected();
    }
    
    public List<PointBoxCurveType> getSelectedFileType() {
        ArrayList<PointBoxCurveType> selectedTypes = new 
                ArrayList<PointBoxCurveType>();
        for (JCheckBox box : types.keySet()) {
            if (box.isSelected()) {
                selectedTypes.add(types.get(box));
            }
        }
        return selectedTypes;
    }
    
    public void add(JCheckBox box, PointBoxCurveType type) {
        types.put(box, type);
        checkBoxList.add(box);
        checkBoxPanel.add(box); 
    }
    
    public String getStatus(StringBuilder sb) {
        if (controlBox.isSelected()) {
            sb.append('1');
        } else {
            sb.append('0');
        }
        
        for (JCheckBox box : checkBoxList) {
            sb.append(box.isSelected() ? '1' : '0');
        }
        return sb.toString();
    }
    
    public int setStatus(String status) {
        if (status.charAt(0) == '1') {
            controlBox.setSelected(true);
            checkBoxPanel.setVisible(true);
        } else {
            controlBox.setSelected(false);
            checkBoxPanel.setVisible(false);
        }
        int index = 1;
        for (JCheckBox box : checkBoxList) {
            if (status.charAt(index) == '1') {
                box.setSelected(true);
            } else {
                box.setSelected(false);
            }
            index++;
        }
        return types.size() + 1;
    }
}