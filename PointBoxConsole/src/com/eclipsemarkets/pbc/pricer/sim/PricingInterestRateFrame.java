/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.eclipsemarkets.pbc.pricer.sim;

import com.eclipsemarkets.data.PointBoxCurveType;
import com.eclipsemarkets.data.PointBoxQuoteCode;
import com.eclipsemarkets.global.CalendarGlobal;
import com.eclipsemarkets.global.NIOGlobal;
import com.eclipsemarkets.pbc.kernel.IPbcKernel;
import com.eclipsemarkets.pricer.commons.FormatterCommons;
import com.eclipsemarkets.web.pbc.PricingCurveFileSettings;
import java.awt.Component;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author Zhijun Zhang
 */
public class PricingInterestRateFrame extends AbstractPricingRuntimeCurveFrame {
    /**
     * Creates new form PricingInterestRateFrame
     */
    public PricingInterestRateFrame(IPbcKernel kernel, PointBoxQuoteCode code) {
        super(kernel, code);
        initComponents();
        initializeCurveFrame(jClassSelector, jGroupSelector, jCodeSelector);
    }

    @Override
    String getFrameTitle() {
        return "Interest Rate";
    }

    @Override
    JTable getTargetTable() {
        return jTargetTable;
    }
    
    @Override
    void updateFrameForTargetCodeImpl(PointBoxQuoteCode code){
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Contract");
        model.addColumn("Interest Rate (%)");
        
        /**
         * todo: other curve windows should use the following style to refresh the data model
         */
        getKernel().refreshPricingEnvironment();
        List<Object[]> result = getKernel().retireveOptionInterestRates(code);
        
        for (Object[] objArray : result){
            if ((objArray != null) && (objArray.length == 2)){
                model.addRow(objArray);
            }
        }
        jTargetTable.setModel(model);   
        jTargetTable.getColumnModel().getColumn(0).setCellRenderer(new PirTableCellRenderer());
        jTargetTable.getColumnModel().getColumn(1).setCellRenderer(new PirTableCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jClassSelector = new javax.swing.JComboBox();
        jGroupSelector = new javax.swing.JComboBox();
        jCodeSelector = new javax.swing.JComboBox();
        jSave = new javax.swing.JButton();
        jRefresh = new javax.swing.JButton();
        jClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTargetTable = new javax.swing.JTable();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 600));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.add(jClassSelector);

        jPanel2.add(jGroupSelector);

        jPanel2.add(jCodeSelector);

        jSave.setText("Save");
        jSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveActionPerformed(evt);
            }
        });
        jPanel2.add(jSave);

        jRefresh.setText("Refresh");
        jRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshActionPerformed(evt);
            }
        });
        jPanel2.add(jRefresh);

        jClose.setText("Close");
        jClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jClose);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jTargetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTargetTable);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jCloseActionPerformed

    private void jRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshActionPerformed
        updateFrameForTargetCode(getTargetCode());
    }//GEN-LAST:event_jRefreshActionPerformed

    private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
        try {
            
            TableCellEditor aTableCellEditor = jTargetTable.getCellEditor();
            if (aTableCellEditor != null){
                Object obj = aTableCellEditor.getCellEditorValue();
                if (obj != null){
                    aTableCellEditor.stopCellEditing();
                }
            }
            
            DefaultTableModel model = (DefaultTableModel)jTargetTable.getModel();
            int rowTotal = model.getRowCount();
            //get file content
            String content = "";
            for (int i = 0; i < rowTotal; i++){
                content += parseMMddyyyyFromRenderer(model.getValueAt(i, 0).toString()) + "\t"
                            + model.getValueAt(i, 1).toString() + NIOGlobal.lineSeparator();
            }//for-loop
            //generate temp file
            PricingCurveFileSettings aPricingCurveFileSettings = getKernel().retrievePricingCurveFileSettings(getTargetCode(), PointBoxCurveType.InterestRate);
            String filePath = getKernel().getLocalCurveFileFullPath(getTargetCode(), aPricingCurveFileSettings, true);
            NIOGlobal.writeTextToNewFileUnsafely(content, filePath);
        } catch (IOException ex) {
            Logger.getLogger(PricingInterestRateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jClassSelector;
    private javax.swing.JButton jClose;
    private javax.swing.JComboBox jCodeSelector;
    private javax.swing.JComboBox jGroupSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jRefresh;
    private javax.swing.JButton jSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTargetTable;
    // End of variables declaration//GEN-END:variables
    
    private String parseMMddyyyyFromRenderer(String value){
        SimpleDateFormat sdf = new SimpleDateFormat("MMddyyyy");
        Date dt;
        try {
            dt = sdf.parse(value.toString());
            GregorianCalendar datetime = new GregorianCalendar();
            datetime.setTimeInMillis(dt.getTime());
            value = CalendarGlobal.convertMdyyyy(dt, "/");
        } catch (ParseException ex) {
            Logger.getLogger(PricingInterestRateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return value;
    }
    
    private class PirTableCellRenderer extends DefaultTableCellRenderer {
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            switch (column) {
                case 0:
                    setHorizontalAlignment(JLabel.LEFT);
                    
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM-yy");
                    Date dt = CalendarGlobal.convertToDate(value.toString(), "MMddyyyy");
                    if (dt == null){
                        setText(value.toString());
                    }else{
                        setText(sdf.format(dt));
                    }
                    break;
                case 1:
                    setHorizontalAlignment(JLabel.RIGHT);
                    JTextField textField = new JTextField();
                    if (value instanceof Double){
                        textField.setText(FormatterCommons.format4Dec(((Double)value)*100.0));
                    }
                    TableColumn col = table.getColumnModel().getColumn(column);
                    col.setCellEditor(new DefaultCellEditor(textField)); 
                    break;
            }

            return c;
        }
    }
}
